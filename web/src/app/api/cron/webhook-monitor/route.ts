import { NextRequest, NextResponse } from 'next/server';
import { WebhookManager } from '@/lib/webhook-manager';

// Sistema de monitoramento autom√°tico que roda a cada 5 minutos
export async function GET(request: NextRequest) {
  try {
    console.log('üîÑ [CRON] Iniciando monitoramento autom√°tico de webhooks...');
    
    // Verificar autoriza√ß√£o (opcional para seguran√ßa)
    const authHeader = request.headers.get('authorization');
    const cronSecret = process.env.CRON_SECRET || 'webhook-monitor-secret';
    
    if (authHeader && authHeader !== `Bearer ${cronSecret}`) {
      console.log('‚ö†Ô∏è [CRON] Acesso n√£o autorizado');
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 });
    }

    // Executar configura√ß√£o autom√°tica para todos os bots
    const result = await WebhookManager.setupAllBots();
    
    console.log('‚úÖ [CRON] Monitoramento conclu√≠do:', result);
    
    return NextResponse.json({
      success: true,
      message: 'Monitoramento autom√°tico executado',
      timestamp: new Date().toISOString(),
      ...result
    });
    
  } catch (error) {
    console.error('‚ùå [CRON] Erro no monitoramento autom√°tico:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Erro no monitoramento autom√°tico',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
}

// Endpoint para for√ßar execu√ß√£o manual
export async function POST(request: NextRequest) {
  try {
    console.log('üîÑ [MANUAL] Execu√ß√£o manual do monitoramento...');
    
    const result = await WebhookManager.setupAllBots();
    
    return NextResponse.json({
      success: true,
      message: 'Monitoramento manual executado',
      timestamp: new Date().toISOString(),
      ...result
    });
    
  } catch (error) {
    console.error('‚ùå [MANUAL] Erro na execu√ß√£o manual:', error);
    return NextResponse.json({ 
      success: false, 
      error: 'Erro na execu√ß√£o manual',
      timestamp: new Date().toISOString()
    }, { status: 500 });
  }
} 