Voc√™ est√° trabalhando em um projeto web j√° iniciado, com painel administrativo em Next.js 14 (React), TailwindCSS, Supabase (Auth, DB, Storage), e um bot em Python com python-telegram-bot. O sistema √© um clone aprimorado do MadBot, onde o cliente pode criar bots que gerenciam grupos pagos no Telegram.

A miss√£o agora √© implementar o fluxo completo de cria√ß√£o de bots personalizados pelo site, incluindo personaliza√ß√£o de mensagens autom√°ticas e integra√ß√£o com grupos Telegram.

# üîß Contexto de estrutura j√° feita:
- Supabase com tabelas: `users`, `bots`, `groups`, `plans`, `payments`, `sales`, `reminders`
- RLS habilitado por usu√°rio
- Painel administrativo com rotas /dashboard, /dashboard/bots, etc.
- Integra√ß√£o do backend j√° preparada para receber e enviar dados entre bot Python e frontend Next.js via API
- Usu√°rio faz login no site, vai em **Dashboard > Meus Bots**, e l√° pode criar e gerenciar bots

# üß† Agora voc√™ precisa implementar:

## 1. Fluxo de Cria√ß√£o de Bot via Painel
Crie um modal ou formul√°rio em `/dashboard/bots` com os seguintes campos obrigat√≥rios:
- **Nome do Bot**
- **Token do Bot** (gerado via BotFather)
- **Imagem do Bot** (upload para o Supabase Storage)
- **Grupo VIP do Telegram** (campo onde o usu√°rio cola o link de convite privado ou @username do grupo)
- **Plano de Cobran√ßa**:
  - Nome do plano (ex: "Mensal VIP Carros")
  - Pre√ßo
  - Per√≠odo (7 dias, 15 dias, 30 dias, 3 meses, 6 meses, 1 ano, vital√≠cio) ‚Äî dropdown fixo
- **Mensagem de Boas-Vindas** (campo de texto livre com suporte a Markdown/HTML b√°sico)
- **M√≠dia de Boas-Vindas** (upload opcional de imagem ou v√≠deo demonstrativo do grupo, exibido junto √† mensagem)

### üíæ O que fazer ao enviar:
- Criar entrada na tabela `bots` com status `active: false`
- Armazenar no Supabase Storage:
  - Imagem do bot
  - M√≠dia de boas-vindas
- Criar entrada em `groups` associada ao `bot_id`
- Criar plano em `plans` com os dados fornecidos
- Enviar o token para API/backend para:
  - Definir webhook autom√°tico
  - Configurar mensagem inicial personalizada (bem-vindo + m√≠dia)
  - Associar o grupo informado ao bot
  - Validar token com o Telegram
  - Retornar se deu certo ou n√£o

## 2. Backend (Next.js API Route)
Crie rota em `/api/bots/create` para:
- Validar token com Telegram (GET https://api.telegram.org/bot<TOKEN>/getMe)
- Setar webhook (POST para backend Python que chama Telegram webhook)
- Retornar sucesso ou erro para frontend
- Usar Supabase Admin para armazenar dados
- Retornar o `bot_id` e URL do bot para o cliente

## 3. Bot Python (Webhook)
No bot Python:
- Quando um usu√°rio inicia com `/start`:
  - Buscar dados do bot no banco via ID do token (GET `/api/bots/by-token`)
  - Enviar mensagem personalizada com a m√≠dia configurada (texto + v√≠deo ou imagem, se houver)
  - Enviar op√ß√µes de planos como bot√µes com pre√ßo e dura√ß√£o
- Quando o usu√°rio clicar num plano:
  - Gerar cobran√ßa via API de pagamento (Pix ou mock, j√° pronto)
  - Enviar link de pagamento
  - Aguardar confirma√ß√£o (mock ou real)
  - Ao confirmar, adicionar o usu√°rio ao grupo VIP (via invite link privado)
- Comando `/ajuda` deve listar comandos dispon√≠veis

## 4. Frontend ‚Äî UI/UX
- Interface visual bonita, como j√° vem sendo feita (Tailwind)
- Mostrar lista de bots cadastrados do usu√°rio
- Mostrar bot√£o "Criar Novo Bot"
- Ap√≥s criar, mostrar status do webhook e link do bot no Telegram
- Mostrar pr√©via da mensagem de boas-vindas configurada

## 5. Supabase (automatizado via MCP)
Garanta que as seguintes tabelas tenham as colunas necess√°rias:

**Tabela `bots`:**
- id
- owner (FK para users)
- name
- token
- avatar_url
- welcome_message
- welcome_media_url
- status
- created_at

**Tabela `groups`:**
- id
- bot_id
- telegram_group_link

**Tabela `plans`:**
- id
- bot_id
- name
- price
- duration_days

**Pol√≠ticas RLS**: Usu√°rios s√≥ veem os bots que criaram

---

üìå **Importante:**  
Use componentes reutiliz√°veis do projeto, como os bot√µes, `AuthForm`, `StatCard` e layouts existentes. A usabilidade deve ser intuitiva e bonita.  

üß† Lembre-se: o GPT do Cursor j√° tem o MCP ativado, ent√£o ele deve criar tabelas e colunas que n√£o existam automaticamente ao usar Supabase Client.

# Objetivo final
Permitir que o usu√°rio cadastre seu bot, configure tudo (grupo, mensagem, m√≠dia, planos), veja o link do bot pronto e funcional no Telegram, e visualize o que o usu√°rio ver√° ao iniciar a conversa com o bot, tudo isso direto pelo painel sem precisar configurar nada fora do site.

