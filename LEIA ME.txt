Quero criar um sistema completo estilo o site MadBot (https://madbot.com.br/), que permite que usu√°rios criem seus pr√≥prios bots do Telegram para vender acesso a grupos VIP ap√≥s pagamento. O foco do sistema √© ser comercializado para criadores de conte√∫do (ex: +18, cursos, comunidades pagas etc).

O sistema ser√° composto por:

---

üîß TECNOLOGIAS QUE DESEJO USAR:

- Linguagem principal: **Python**
- Framework do bot: **python-telegram-bot**
- Webhook/Servidor Backend: **FastAPI**
- Painel administrativo web: **Next.js** (com TailwindCSS, se poss√≠vel)
- Banco de dados: **Supabase** (PostgreSQL + Auth + Storage)
- Gateways de pagamento: **PushinPay (PIX BRL)** e **Mercado Pago**
- Hospedagem inicial: **Railway**, **Vercel** ou **Render** (de prefer√™ncia gratuito para testes)
- Integra√ß√£o com o **BotFather** (para configurar o bot do cliente)
- Integra√ß√£o com a **API do Telegram** (para adicionar usu√°rios automaticamente a grupos VIP ap√≥s pagamento)
- Integra√ß√£o com **email ou Telegram** para notificar clientes e remarketing

---

üß† FUNCIONALIDADES DO SISTEMA:

1. **Cadastro e login do cliente no painel**
   - Autentica√ß√£o via Supabase Auth
   - Armazenar dados do usu√°rio no Supabase (nome, email, plano, bot configurado)

2. **Cria√ß√£o do bot pelo usu√°rio**
   - Ele ir√° informar o token do bot do BotFather
   - O sistema configura o webhook automaticamente
   - O usu√°rio tamb√©m informa o ID do grupo VIP (onde os clientes dele ser√£o adicionados ap√≥s pagamento)

3. **Cria√ß√£o de planos de acesso**
   - Ex: Plano Mensal, Trimestral, Semestral etc.
   - O cliente define os valores que quer cobrar de seus usu√°rios
   - Pode usar apenas BRL (R$)

4. **Integra√ß√£o com PushinPay e Mercado Pago**
   - O sistema deve gerar um c√≥digo PIX din√¢mico via PushinPay (ou Mercado Pago se o cliente escolher)
   - Ap√≥s o pagamento ser confirmado (via webhook ou polling), o usu√°rio pagante ser√° adicionado automaticamente ao grupo Telegram do cliente

5. **Sistema de remarketing**
   - O sistema deve armazenar quem n√£o pagou e lembrar (ex: via mensagem no Telegram ou email)
   - Pode ser agendado (cron job) para enviar lembrete ap√≥s 12h, 24h, 3 dias etc.

6. **Painel administrativo**
   - Dashboard para cada cliente com:
     - Status do seu bot (ativo/inativo)
     - N√∫mero de vendas
     - Planos ativos
     - Lista de clientes pagantes
     - Op√ß√£o para copiar link do bot ou bot√£o de ‚ÄúTestar‚Äù
     - Relat√≥rios financeiros
     - √Årea de Indica√ß√£o (como no MadBot)

7. **Controle financeiro**
   - Mostrar quanto o cliente lucrou
   - Registrar cada venda (valor, cliente, data)
   - Hist√≥rico de transa√ß√µes

8. **P√°gina de configura√ß√£o inicial**
   - Passo a passo com v√≠deo de instru√ß√£o (igual MadBot)
   - Integra√ß√£o com Youtube ou v√≠deo pr√≥prio

---

üì¶ SOBRE O SUPABASE

- Usar o plano gratuito do Supabase
- Criar tabelas: `users`, `bots`, `plans`, `sales`, `groups`, `payments`, `reminders`
- Usar Supabase Storage para armazenar imagens ou arquivos (se necess√°rio)
- Usar Supabase Auth para login (email/senha)

---

üß™ IMPORTANTE

- Quero que o c√≥digo seja modular, limpo, com separa√ß√£o clara entre backend, frontend e bot
- Toda l√≥gica de pagamentos e bots deve ser segura (verifica√ß√£o de pagamento, controle de webhook etc)
- O projeto deve ser poss√≠vel de escalar e reutilizar
- O painel web deve ser bonito, funcional e f√°cil de usar
- Incluir `.env.example` com as vari√°veis de ambiente usadas
- C√≥digo comentado e pronto para deploy

---

üìå Comece estruturando os diret√≥rios e arquivos principais:
- `/bot/` ‚Üí C√≥digo do bot do Telegram (python-telegram-bot)
- `/api/` ‚Üí Backend com FastAPI (recebe webhooks, cria endpoints REST)
- `/web/` ‚Üí Painel administrativo com Next.js

---

‚ùóQuero que voc√™ me ajude passo a passo, gerando os arquivos e c√≥digo conforme for poss√≠vel, me orientando com instru√ß√µes claras. Estou usando a IA do Cursor + ChatGPT para isso.

